// source: wifi_ctrl.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var proto = {};
var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var constants_pb = require('./constants_pb.js');
goog.object.extend(proto, constants_pb);
goog.exportSymbol('proto.CmdCtrlReprov', null, global);
goog.exportSymbol('proto.CmdCtrlReset', null, global);
goog.exportSymbol('proto.RespCtrlReprov', null, global);
goog.exportSymbol('proto.RespCtrlReset', null, global);
goog.exportSymbol('proto.WiFiCtrlMsgType', null, global);
goog.exportSymbol('proto.WiFiCtrlPayload', null, global);
goog.exportSymbol('proto.WiFiCtrlPayload.PayloadCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdCtrlReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdCtrlReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdCtrlReset.displayName = 'proto.CmdCtrlReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespCtrlReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespCtrlReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespCtrlReset.displayName = 'proto.RespCtrlReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdCtrlReprov = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdCtrlReprov, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdCtrlReprov.displayName = 'proto.CmdCtrlReprov';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespCtrlReprov = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespCtrlReprov, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespCtrlReprov.displayName = 'proto.RespCtrlReprov';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiCtrlPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WiFiCtrlPayload.oneofGroups_);
};
goog.inherits(proto.WiFiCtrlPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiCtrlPayload.displayName = 'proto.WiFiCtrlPayload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdCtrlReset.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdCtrlReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdCtrlReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdCtrlReset}
 */
proto.CmdCtrlReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdCtrlReset;
  return proto.CmdCtrlReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdCtrlReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdCtrlReset}
 */
proto.CmdCtrlReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdCtrlReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdCtrlReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdCtrlReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespCtrlReset.prototype.toObject = function(opt_includeInstance) {
  return proto.RespCtrlReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespCtrlReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespCtrlReset}
 */
proto.RespCtrlReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespCtrlReset;
  return proto.RespCtrlReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespCtrlReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespCtrlReset}
 */
proto.RespCtrlReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespCtrlReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespCtrlReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespCtrlReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdCtrlReprov.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdCtrlReprov.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdCtrlReprov} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReprov.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdCtrlReprov}
 */
proto.CmdCtrlReprov.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdCtrlReprov;
  return proto.CmdCtrlReprov.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdCtrlReprov} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdCtrlReprov}
 */
proto.CmdCtrlReprov.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdCtrlReprov.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdCtrlReprov.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdCtrlReprov} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReprov.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespCtrlReprov.prototype.toObject = function(opt_includeInstance) {
  return proto.RespCtrlReprov.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespCtrlReprov} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReprov.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespCtrlReprov}
 */
proto.RespCtrlReprov.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespCtrlReprov;
  return proto.RespCtrlReprov.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespCtrlReprov} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespCtrlReprov}
 */
proto.RespCtrlReprov.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespCtrlReprov.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespCtrlReprov.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespCtrlReprov} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReprov.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WiFiCtrlPayload.oneofGroups_ = [[11,12,13,14]];

/**
 * @enum {number}
 */
proto.WiFiCtrlPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_CTRL_RESET: 11,
  RESP_CTRL_RESET: 12,
  CMD_CTRL_REPROV: 13,
  RESP_CTRL_REPROV: 14
};

/**
 * @return {proto.WiFiCtrlPayload.PayloadCase}
 */
proto.WiFiCtrlPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.WiFiCtrlPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.WiFiCtrlPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiCtrlPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiCtrlPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiCtrlPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiCtrlPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
status: jspb.Message.getFieldWithDefault(msg, 2, 0),
cmdCtrlReset: (f = msg.getCmdCtrlReset()) && proto.CmdCtrlReset.toObject(includeInstance, f),
respCtrlReset: (f = msg.getRespCtrlReset()) && proto.RespCtrlReset.toObject(includeInstance, f),
cmdCtrlReprov: (f = msg.getCmdCtrlReprov()) && proto.CmdCtrlReprov.toObject(includeInstance, f),
respCtrlReprov: (f = msg.getRespCtrlReprov()) && proto.RespCtrlReprov.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiCtrlPayload}
 */
proto.WiFiCtrlPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiCtrlPayload;
  return proto.WiFiCtrlPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiCtrlPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiCtrlPayload}
 */
proto.WiFiCtrlPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WiFiCtrlMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = new proto.CmdCtrlReset;
      reader.readMessage(value,proto.CmdCtrlReset.deserializeBinaryFromReader);
      msg.setCmdCtrlReset(value);
      break;
    case 12:
      var value = new proto.RespCtrlReset;
      reader.readMessage(value,proto.RespCtrlReset.deserializeBinaryFromReader);
      msg.setRespCtrlReset(value);
      break;
    case 13:
      var value = new proto.CmdCtrlReprov;
      reader.readMessage(value,proto.CmdCtrlReprov.deserializeBinaryFromReader);
      msg.setCmdCtrlReprov(value);
      break;
    case 14:
      var value = new proto.RespCtrlReprov;
      reader.readMessage(value,proto.RespCtrlReprov.deserializeBinaryFromReader);
      msg.setRespCtrlReprov(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiCtrlPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiCtrlPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiCtrlPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiCtrlPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCmdCtrlReset();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.CmdCtrlReset.serializeBinaryToWriter
    );
  }
  f = message.getRespCtrlReset();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.RespCtrlReset.serializeBinaryToWriter
    );
  }
  f = message.getCmdCtrlReprov();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.CmdCtrlReprov.serializeBinaryToWriter
    );
  }
  f = message.getRespCtrlReprov();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.RespCtrlReprov.serializeBinaryToWriter
    );
  }
};


/**
 * optional WiFiCtrlMsgType msg = 1;
 * @return {!proto.WiFiCtrlMsgType}
 */
proto.WiFiCtrlPayload.prototype.getMsg = function() {
  return /** @type {!proto.WiFiCtrlMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WiFiCtrlMsgType} value
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.Status}
 */
proto.WiFiCtrlPayload.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CmdCtrlReset cmd_ctrl_reset = 11;
 * @return {?proto.CmdCtrlReset}
 */
proto.WiFiCtrlPayload.prototype.getCmdCtrlReset = function() {
  return /** @type{?proto.CmdCtrlReset} */ (
    jspb.Message.getWrapperField(this, proto.CmdCtrlReset, 11));
};


/**
 * @param {?proto.CmdCtrlReset|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setCmdCtrlReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearCmdCtrlReset = function() {
  return this.setCmdCtrlReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasCmdCtrlReset = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RespCtrlReset resp_ctrl_reset = 12;
 * @return {?proto.RespCtrlReset}
 */
proto.WiFiCtrlPayload.prototype.getRespCtrlReset = function() {
  return /** @type{?proto.RespCtrlReset} */ (
    jspb.Message.getWrapperField(this, proto.RespCtrlReset, 12));
};


/**
 * @param {?proto.RespCtrlReset|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setRespCtrlReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearRespCtrlReset = function() {
  return this.setRespCtrlReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasRespCtrlReset = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CmdCtrlReprov cmd_ctrl_reprov = 13;
 * @return {?proto.CmdCtrlReprov}
 */
proto.WiFiCtrlPayload.prototype.getCmdCtrlReprov = function() {
  return /** @type{?proto.CmdCtrlReprov} */ (
    jspb.Message.getWrapperField(this, proto.CmdCtrlReprov, 13));
};


/**
 * @param {?proto.CmdCtrlReprov|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setCmdCtrlReprov = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearCmdCtrlReprov = function() {
  return this.setCmdCtrlReprov(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasCmdCtrlReprov = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RespCtrlReprov resp_ctrl_reprov = 14;
 * @return {?proto.RespCtrlReprov}
 */
proto.WiFiCtrlPayload.prototype.getRespCtrlReprov = function() {
  return /** @type{?proto.RespCtrlReprov} */ (
    jspb.Message.getWrapperField(this, proto.RespCtrlReprov, 14));
};


/**
 * @param {?proto.RespCtrlReprov|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setRespCtrlReprov = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearRespCtrlReprov = function() {
  return this.setRespCtrlReprov(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasRespCtrlReprov = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * @enum {number}
 */
proto.WiFiCtrlMsgType = {
  TYPECTRLRESERVED: 0,
  TYPECMDCTRLRESET: 1,
  TYPERESPCTRLRESET: 2,
  TYPECMDCTRLREPROV: 3,
  TYPERESPCTRLREPROV: 4
};

goog.object.extend(exports, proto);
